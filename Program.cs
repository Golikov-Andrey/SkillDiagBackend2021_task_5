using System;
using System.Collections.Generic;

namespace SkillDiagBackend2021_task_5
{
    class Program
    {
        /*


                Слава только-только устроился в Яндекс.Маркет и получил первое задание: написать компонент, отвечающий за ограничение запросов пользователей к сервису.
        Характеристики компонента — лимит запросов на пользователя, лимит запросов на сервис и продолжительность интервала (duration), за который учитываются запросы.
                Запрос к сервису, поступивший в момент времени time, отклоняется, если он удовлетворяет хотя бы одному из двух условий:

            Если в промежутке времени 
            [time−duration,time] от данного пользователя было принято к выполнению не меньше пользовательского лимита запросов — должен возвращаться код ошибки «Too Many Requests».
            Если в промежутке времени [time−duration,time] суммарно от всех пользователей было принято к выполнению не меньше сервисного лимита запросов — должен возвращаться код ошибки «Service Unavailable».
            Условия проверяются последовательно друг за другом, пока не будет найдено первое условие, которому запрос удовлетворяет. Если запрос не удовлетворяет ни одному условию,
                    то он выполняется. Пока что Слава еще не до конца погрузился в разработку и внутренние технологии, поэтому решил написать прототип, а вы можете помочь Славе.

            Формат ввода
            Программа получает на вход строку с тремя числами, разделенными пробелами: 
            userLimit (1≤userLimit≤5⋅104) — лимит запросов на пользователя, serviceLimit (1≤serviceLimit≤5⋅104) — лимит запросов на сервис, duration (1≤duration≤109) — промежуток времени в миллисекундах,
                    за который учитываются запросы для расчета лимитов.В следующих строках поступают описания запросов. Каждый запрос представлен двумя разделенными пробелом числами: 
            time (1≤time≤109) — время поступления запроса, userId (1≤userId≤109) — идентификатор пользователя, выполнившего запрос.
            Входные данные завершаются строкой с числом −1. Гарантируется, что все времена в описании запросов не убывают, а количество запросов не превышает 5⋅104.
            Тестирующая система даст прочитать очередной запрос только после записи в стандартный вывод ответа на предыдущий запрос (не забудьте после вывода запроса сделать flush).

            Формат вывода
            Для каждого запроса необходимо вывести один из трех кодов ответа HTTP:
            200 — если запрос будет выполнен.
            429 — если запрос будет отклонен из-за превышения лимита запросов пользователем.
            503 — если запрос будет отклонен из-за превышения сервисного лимита запросов.


                                Пример
                        Ввод	
                        2 5 5
                        1 100
                        1 100
                        2 100
                        2 200
                        2 300
                        2 400
                        2 500
                        3 500
                        5 200
                        6 100
                        7 200
                        -1
                                Вывод
                        200
                        200
                        429
                        200
                        200
                        200
                        503
                        503
                        503
                        429
                        200

        */

        static void Main(string[] args)
        {
            //Параметры работы сервиса
            String[] Parametr = Console.ReadLine().Split(" ");
            //Максимальное количество запросов от пользователя
            int userLimit = Convert.ToInt32(Parametr[0]);
            //Максимальное количество запросов от всех пользователей на сервер
            int serviceLimit = Convert.ToInt32(Parametr[1]);
            //Время обработки запросов
            long duration = Convert.ToInt32(Parametr[2]);

            //Проверяем краевые значения параметров сервиса
            if (userLimit <= 50000 && userLimit >= 1 && serviceLimit <= 50000 && serviceLimit >= 1 && duration <= 1000000000 && duration >= 1)
            {
                //Словарь ключ: идентификатор пользователя, значение время поступления запроса от пользователя
                Dictionary<long, List<long>> User = new Dictionary<long, List<long>>();
                //Массив запросов на выполнение, точнее времени поступления запросов
                List<long> requestInProgress = new List<long>();

                //Входная строчка
                string inputLine = "";
                //Разобранная входная строчка
                String[] inputParser;

                //Время последнего запроса
                long time = -1;
                //Идентификатор пользователя приславшего последний запрос
                long userID = -1;
                //Считываем первый запрос
                inputLine = Console.ReadLine();
                //Впемя самого старого запроса в requestInProgress 
                long oldTime = 0;


                //Если пришел "-1" то завершаем работу сервиса
                while (!(inputLine == "-1"))
                {
                    //Разбираем входную строчку с запросом
                    inputParser = inputLine.Split(" ");

                    //Получаем время и идентификатор пользователя
                    time = Convert.ToInt32(inputParser[0]);
                    userID = Convert.ToInt32(inputParser[1]);

                    //Проверяем краевые значения
                    if (time > 1000000000 || time <= 0) break;
                    if (userID > 1000000000 || userID <= 0) break;


                    //Если в массиве с временами запросов есть старые запросы, то чистим массив от них
                    if (time - oldTime > duration)
                    {
                        //Массив чистим через LINQ
                        requestInProgress.RemoveAll(x => time - x > duration);

                        //Если в массиве остались элементы, то первый самый старый по условию задачи 
                        if (requestInProgress.Count > 0)
                        {
                            oldTime = requestInProgress[0];
                        }

                    }


                    //Можно немного рефакторить, но я уже устал
                    //Еще нужно чистить пользователей от которых нет запросов в словаре

                    //Если запросов слишком много возвращаем 503
                    if (requestInProgress.Count < serviceLimit)
                    {
                        //Проверяем есть ли от пользователя запросы
                        if (User.ContainsKey(userID))
                        {
                            //Чистим старые запросы от пользователя
                            User[userID].RemoveAll(x => time - x > duration);

                            //Если у пользователя слишком много запросов возвращаем 429
                            if (User[userID].Count < userLimit)
                            {
                                //Добавляем время запроса от пользователя в словарь и общий массив
                                User[userID].Add(time);
                                requestInProgress.Add(time);

                                Console.WriteLine("200");
                            }
                            else
                            {
                                Console.WriteLine("429");
                            }
                        }
                        else//Пользователь прислал запрос в первый раз
                        {
                            //Создаем в словаре запись о пользователе                            
                            User.Add(userID, new List<long>());
                            //Добавляем время запроса от пользователя в словарь и общий массив
                            User[userID].Add(time);
                            requestInProgress.Add(time);

                            Console.WriteLine("200");
                        }
                    }
                    else
                    {
                        //Если у пользователя есть уже запросы на выполнении 
                        if (User.ContainsKey(userID))
                        {
                            //Чистим старые запросы от пользователя
                            User[userID].RemoveAll(x => time - x > duration);
                            //Если у пользователя слишком много запросов возвращаем 429
                            if (User[userID].Count >= userLimit)
                            {
                                Console.WriteLine("429");
                            }
                            else
                            {
                                Console.WriteLine("503");
                            }
                        }
                        else
                        {
                            Console.WriteLine("503");
                        }
                    }




                    //Считываем новый запрос
                    inputLine = Console.ReadLine();
                }
            }
            else
            {
                Console.WriteLine("error");
            }


        }


    }

}
